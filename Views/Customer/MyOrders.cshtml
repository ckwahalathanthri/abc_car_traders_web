@model ABCCarTraders.Models.ViewModels.OrderListViewModel
@{
    ViewData["Title"] = "My Orders";
    Layout = "~/Views/Shared/_CustomerLayout.cshtml";
}

<!-- Page Header -->
<div class="page-header bg-gradient-primary text-white py-4 mb-4 rounded">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="display-6 fw-bold mb-2">
                    <i class="fas fa-shopping-bag me-3"></i>My Orders
                </h1>
                <p class="lead mb-0">Track and manage your orders</p>
            </div>
            <div class="col-md-4 text-end">
                <a href="@Url.Action("Index", "Cars")" class="btn btn-light btn-lg">
                    <i class="fas fa-plus me-2"></i>Shop More
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Order Statistics -->
<div class="row g-4 mb-4">
    <div class="col-lg-3 col-md-6">
        <div class="card stat-card bg-primary text-white border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="stat-icon mb-2">
                    <i class="fas fa-shopping-cart fa-2x"></i>
                </div>
                <h3 class="fw-bold">@Model.TotalOrders</h3>
                <p class="mb-0">Total Orders</p>
            </div>
        </div>
    </div>
    
    <div class="col-lg-3 col-md-6">
        <div class="card stat-card bg-warning text-white border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="stat-icon mb-2">
                    <i class="fas fa-clock fa-2x"></i>
                </div>
                <h3 class="fw-bold">@Model.PendingOrders</h3>
                <p class="mb-0">Pending Orders</p>
            </div>
        </div>
    </div>
    
    <div class="col-lg-3 col-md-6">
        <div class="card stat-card bg-success text-white border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="stat-icon mb-2">
                    <i class="fas fa-check-circle fa-2x"></i>
                </div>
                <h3 class="fw-bold">@Model.CompletedOrders</h3>
                <p class="mb-0">Completed Orders</p>
            </div>
        </div>
    </div>
    
    <div class="col-lg-3 col-md-6">
        <div class="card stat-card bg-info text-white border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="stat-icon mb-2">
                    <i class="fas fa-dollar-sign fa-2x"></i>
                </div>
                <h3 class="fw-bold">@Model.TotalRevenue.ToString("C")</h3>
                <p class="mb-0">Total Spent</p>
            </div>
        </div>
    </div>
</div>

<!-- Filters and Search -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body">
        <form method="get" class="row g-3 align-items-end">
            <div class="col-md-3">
                <label for="orderStatus" class="form-label fw-semibold">Status</label>
                <select name="status" id="orderStatus" class="form-select">
                    <option value="">All Orders</option>
                    <option value="Pending">Pending</option>
                    <option value="Confirmed">Confirmed</option>
                    <option value="Processing">Processing</option>
                    <option value="Shipped">Shipped</option>
                    <option value="Delivered">Delivered</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="dateFrom" class="form-label fw-semibold">From Date</label>
                <input type="date" name="dateFrom" id="dateFrom" class="form-control">
            </div>
            <div class="col-md-3">
                <label for="dateTo" class="form-label fw-semibold">To Date</label>
                <input type="date" name="dateTo" id="dateTo" class="form-control">
            </div>
            <div class="col-md-3">
                <button type="submit" class="btn btn-primary w-100">
                    <i class="fas fa-search me-2"></i>Filter Orders
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Orders List -->
<div class="card border-0 shadow-sm">
    <div class="card-header bg-transparent border-bottom-0 pb-0">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="card-title fw-bold mb-0">
                <i class="fas fa-list me-2 text-primary"></i>Order History
            </h5>
            <div class="d-flex gap-2">
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-sort me-1"></i>Sort By
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="?sort=date_desc">Latest First</a></li>
                        <li><a class="dropdown-item" href="?sort=date_asc">Oldest First</a></li>
                        <li><a class="dropdown-item" href="?sort=amount_desc">Highest Amount</a></li>
                        <li><a class="dropdown-item" href="?sort=amount_asc">Lowest Amount</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body p-0">
        @if (Model.Orders?.Any() == true)
        {
            <!-- Desktop View -->
            <div class="table-responsive d-none d-lg-block">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="px-4 py-3">Order Details</th>
                            <th class="py-3">Items</th>
                            <th class="py-3">Amount</th>
                            <th class="py-3">Status</th>
                            <th class="py-3">Payment</th>
                            <th class="py-3 text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model.Orders)
                        {
                            <tr class="order-row">
                                <td class="px-4 py-3">
                                    <div class="order-info">
                                        <h6 class="fw-bold text-primary mb-1">#@order.OrderNumber</h6>
                                        <p class="text-muted small mb-0">
                                            <i class="fas fa-calendar me-1"></i>@order.OrderDate.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                        </p>
                                    </div>
                                </td>
                                <td class="py-3">
                                    <span class="badge bg-light text-dark">
                                        @order.OrderItems.Count item@(order.OrderItems.Count != 1 ? "s" : "")
                                    </span>
                                </td>
                                <td class="py-3">
                                    <span class="fw-bold text-success">@order.FormattedTotalAmount</span>
                                </td>
                                <td class="py-3">
                                    <span class="badge status-badge status-@order.OrderStatus.ToString().ToLower()">
                                        @order.OrderStatus
                                    </span>
                                </td>
                                <td class="py-3">
                                    <span class="badge payment-badge payment-@order.PaymentStatus.ToString().ToLower()">
                                        @order.PaymentStatus
                                    </span>
                                </td>
                                <td class="py-3 text-center">
                                    <div class="btn-group" role="group">
                                        <a href="@Url.Action("OrderDetails", "Customer", new { id = order.OrderId })" 
                                           class="btn btn-sm btn-outline-primary" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        @if (order.OrderStatus == ABCCarTraders.Models.ViewModels.OrderStatus.Pending)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                                    onclick="cancelOrder(@order.OrderId)" title="Cancel Order">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        }
                                        @if (order.OrderStatus == ABCCarTraders.Models.ViewModels.OrderStatus.Delivered)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-success" 
                                                    onclick="reorderItems(@order.OrderId)" title="Reorder">
                                                <i class="fas fa-redo"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            <!-- Mobile View -->
            <div class="d-lg-none">
                @foreach (var order in Model.Orders)
                {
                    <div class="mobile-order-card border-bottom p-3">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <div>
                                <h6 class="fw-bold text-primary mb-1">#@order.OrderNumber</h6>
                                <p class="text-muted small mb-0">
                                    <i class="fas fa-calendar me-1"></i>@order.OrderDate.ToString("MMM dd, yyyy")
                                </p>
                            </div>
                            <span class="fw-bold text-success">@order.FormattedTotalAmount</span>
                        </div>
                        
                        <div class="row g-2 mb-3">
                            <div class="col-6">
                                <span class="badge bg-light text-dark">
                                    @order.OrderItems.Count item@(order.OrderItems.Count != 1 ? "s" : "")
                                </span>
                            </div>
                            <div class="col-6 text-end">
                                <span class="badge status-badge status-@order.OrderStatus.ToString().ToLower()">
                                    @order.OrderStatus
                                </span>
                            </div>
                        </div>
                        
                        <div class="d-flex gap-2">
                            <a href="@Url.Action("OrderDetails", "Customer", new { id = order.OrderId })" 
                               class="btn btn-sm btn-primary flex-fill">
                                <i class="fas fa-eye me-1"></i>View
                            </a>
                            @if (order.OrderStatus == ABCCarTraders.Models.ViewModels.OrderStatus.Pending)
                            {
                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                        onclick="cancelOrder(@order.OrderId)">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-shopping-bag fa-4x text-muted mb-4"></i>
                <h4 class="text-muted mb-3">No Orders Found</h4>
                <p class="text-muted mb-4">You haven't placed any orders yet. Start shopping to see your orders here!</p>
                <div class="d-flex gap-3 justify-content-center">
                    <a href="@Url.Action("Index", "Cars")" class="btn btn-primary btn-lg">
                        <i class="fas fa-car me-2"></i>Browse Cars
                    </a>
                    <a href="@Url.Action("Index", "CarParts")" class="btn btn-outline-primary btn-lg">
                        <i class="fas fa-cogs me-2"></i>Shop Parts
                    </a>
                </div>
            </div>
        }
    </div>
</div>

<!-- Pagination -->
@if (Model.Pagination != null && Model.Pagination.TotalPages > 1)
{
    <nav aria-label="Orders pagination" class="mt-4">
        <ul class="pagination justify-content-center">
            @if (Model.Pagination.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="?page=@(Model.Pagination.CurrentPage - 1)">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            }
            
            @for (int i = Math.Max(1, Model.Pagination.CurrentPage - 2); 
                  i <= Math.Min(Model.Pagination.TotalPages, Model.Pagination.CurrentPage + 2); 
                  i++)
            {
                <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                    <a class="page-link" href="?page=@i">@i</a>
                </li>
            }
            
            @if (Model.Pagination.CurrentPage < Model.Pagination.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="?page=@(Model.Pagination.CurrentPage + 1)">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            }
        </ul>
    </nav>
}

<style>
    .page-header {
        background: linear-gradient(135deg, #0d6efd 0%, #0056b3 100%);
        border-radius: 15px;
    }
    
    .stat-card {
        border-radius: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }
    
    .order-row:hover {
        background-color: #f8f9fa;
    }
    
    .status-badge {
        padding: 0.5em 0.75em;
        border-radius: 6px;
        font-weight: 500;
    }
    
    .status-pending { background-color: #ffc107; color: #000; }
    .status-confirmed { background-color: #17a2b8; color: #fff; }
    .status-processing { background-color: #6f42c1; color: #fff; }
    .status-shipped { background-color: #fd7e14; color: #fff; }
    .status-delivered { background-color: #28a745; color: #fff; }
    .status-cancelled { background-color: #dc3545; color: #fff; }
    
    .payment-badge {
        padding: 0.4em 0.65em;
        border-radius: 6px;
        font-weight: 500;
        font-size: 0.75em;
    }
    
    .payment-pending { background-color: #ffc107; color: #000; }
    .payment-paid { background-color: #28a745; color: #fff; }
    .payment-failed { background-color: #dc3545; color: #fff; }
    .payment-refunded { background-color: #6c757d; color: #fff; }
    
    .mobile-order-card {
        background-color: #fff;
        transition: background-color 0.3s ease;
    }
    
    .mobile-order-card:hover {
        background-color: #f8f9fa;
    }
    
    .card {
        border-radius: 15px;
    }
    
    .btn {
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    
    .pagination .page-link {
        border-radius: 8px;
        margin: 0 2px;
        border: 1px solid #dee2e6;
    }
    
    .pagination .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
</style>

<script>
    function cancelOrder(orderId) {
        if (confirm('Are you sure you want to cancel this order?')) {
            // Make AJAX call to cancel order
            fetch('@Url.Action("CancelOrder", "Customer")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({ orderId: orderId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error cancelling order: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while cancelling the order.');
            });
        }
    }
    
    function reorderItems(orderId) {
        if (confirm('Add all items from this order to your cart?')) {
            // Make AJAX call to reorder
            fetch('@Url.Action("Reorder", "Customer")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({ orderId: orderId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Items added to cart successfully!');
                    window.location.href = '@Url.Action("Cart", "Order")';
                } else {
                    alert('Error reordering: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while reordering.');
            });
        }
    }
</script>