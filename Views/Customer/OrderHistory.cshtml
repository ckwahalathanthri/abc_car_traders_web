@model ABCCarTraders.Models.ViewModels.CustomerOrderHistoryViewModel
@{
    ViewData["Title"] = "Order History";
    Layout = "~/Views/Shared/_CustomerLayout.cshtml";
}

<!-- Page Header -->
<div class="page-header bg-gradient-primary text-white py-4 mb-4 rounded">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="display-6 fw-bold mb-2">
                    <i class="fas fa-history me-3"></i>Order History
                </h1>
                <p class="lead mb-0">Complete history of all your orders and purchases</p>
            </div>
            <div class="col-md-4 text-end">
                <div class="dropdown">
                    <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-download me-2"></i>Export
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="@Url.Action("ExportOrderHistory", "Customer", new { format = "pdf" })">
                            <i class="fas fa-file-pdf me-2 text-danger"></i>Export as PDF
                        </a></li>
                        <li><a class="dropdown-item" href="@Url.Action("ExportOrderHistory", "Customer", new { format = "excel" })">
                            <i class="fas fa-file-excel me-2 text-success"></i>Export as Excel
                        </a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Summary Statistics -->
<div class="row g-4 mb-4">
    <div class="col-lg-4 col-md-6">
        <div class="card stat-card bg-gradient-primary text-white border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="stat-icon mb-3">
                    <i class="fas fa-shopping-cart fa-3x opacity-75"></i>
                </div>
                <h2 class="fw-bold">@Model.TotalOrders</h2>
                <p class="mb-0 opacity-90">Total Orders Placed</p>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4 col-md-6">
        <div class="card stat-card bg-gradient-success text-white border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="stat-icon mb-3">
                    <i class="fas fa-dollar-sign fa-3x opacity-75"></i>
                </div>
                <h2 class="fw-bold">@Model.FormattedTotalSpent</h2>
                <p class="mb-0 opacity-90">Total Amount Spent</p>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4 col-md-6">
        <div class="card stat-card bg-gradient-info text-white border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="stat-icon mb-3">
                    <i class="fas fa-chart-line fa-3x opacity-75"></i>
                </div>
                <h2 class="fw-bold">@Model.FormattedAverageOrderValue</h2>
                <p class="mb-0 opacity-90">Average Order Value</p>
            </div>
        </div>
    </div>
</div>

<!-- Advanced Filters -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-header bg-transparent border-bottom-0 pb-0">
        <h5 class="card-title fw-bold mb-0">
            <i class="fas fa-filter me-2 text-primary"></i>Filter & Search Orders
        </h5>
    </div>
    <div class="card-body">
        <form method="get" class="row g-3 align-items-end">
            <div class="col-md-3">
                <label for="searchQuery" class="form-label fw-semibold">Search</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" name="search" id="searchQuery" class="form-control" 
                           placeholder="Order number, product..." value="@ViewData["SearchQuery"]">
                </div>
            </div>
            
            <div class="col-md-2">
                <label for="orderStatus" class="form-label fw-semibold">Status</label>
                <select name="status" id="orderStatus" class="form-select">
                    <option value="">All Statuses</option>
                    <option value="Pending">Pending</option>
                    <option value="Confirmed">Confirmed</option>
                    <option value="Processing">Processing</option>
                    <option value="Shipped">Shipped</option>
                    <option value="Delivered">Delivered</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>
            
            <div class="col-md-2">
                <label for="dateFrom" class="form-label fw-semibold">From Date</label>
                <input type="date" name="dateFrom" id="dateFrom" class="form-control" value="@ViewData["DateFrom"]">
            </div>
            
            <div class="col-md-2">
                <label for="dateTo" class="form-label fw-semibold">To Date</label>
                <input type="date" name="dateTo" id="dateTo" class="form-control" value="@ViewData["DateTo"]">
            </div>
            
            <div class="col-md-2">
                <label for="amountRange" class="form-label fw-semibold">Amount Range</label>
                <select name="amountRange" id="amountRange" class="form-select">
                    <option value="">Any Amount</option>
                    <option value="0-100">$0 - $100</option>
                    <option value="100-500">$100 - $500</option>
                    <option value="500-1000">$500 - $1,000</option>
                    <option value="1000+">$1,000+</option>
                </select>
            </div>
            
            <div class="col-md-1">
                <button type="submit" class="btn btn-primary w-100">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </form>
        
        <div class="mt-3">
            <a href="@Url.Action("OrderHistory", "Customer")" class="btn btn-outline-secondary btn-sm">
                <i class="fas fa-times me-1"></i>Clear Filters
            </a>
        </div>
    </div>
</div>

<!-- Order History Timeline -->
<div class="card border-0 shadow-sm">
    <div class="card-header bg-transparent border-bottom-0 pb-0">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="card-title fw-bold mb-0">
                <i class="fas fa-clock me-2 text-success"></i>Order Timeline
            </h5>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-secondary btn-sm" onclick="toggleView('timeline')">
                    <i class="fas fa-stream me-1"></i>Timeline View
                </button>
                <button class="btn btn-outline-secondary btn-sm" onclick="toggleView('table')">
                    <i class="fas fa-table me-1"></i>Table View
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model.Orders?.Any() == true)
        {
            <!-- Timeline View -->
            <div id="timelineView" class="order-timeline">
                @{
                    var groupedOrders = Model.Orders.GroupBy(o => o.OrderDate.Date).OrderByDescending(g => g.Key);
                }
                
                @foreach (var dayGroup in groupedOrders)
                {
                    <div class="timeline-day mb-4">
                        <div class="timeline-date sticky-top bg-light p-2 rounded mb-3">
                            <h6 class="fw-bold text-primary mb-0">
                                <i class="fas fa-calendar-day me-2"></i>
                                @dayGroup.Key.ToString("dddd, MMMM dd, yyyy")
                            </h6>
                            <small class="text-muted">@dayGroup.Count() order@(dayGroup.Count() != 1 ? "s" : "")</small>
                        </div>
                        
                        @foreach (var order in dayGroup.OrderBy(o => o.OrderDate))
                        {
                            <div class="timeline-item mb-3">
                                <div class="timeline-marker">
                                    <i class="fas fa-@(order.OrderStatus.ToString().ToLower() == "delivered" ? "check-circle text-success" : 
                                        order.OrderStatus.ToString().ToLower() == "cancelled" ? "times-circle text-danger" : "clock text-warning")"></i>
                                </div>
                                <div class="timeline-content">
                                    <div class="card border-start border-4 border-@(order.OrderStatus.ToString().ToLower() == "delivered" ? "success" : 
                                        order.OrderStatus.ToString().ToLower() == "cancelled" ? "danger" : "warning")">
                                        <div class="card-body">
                                            <div class="row align-items-center">
                                                <div class="col-md-8">
                                                    <h6 class="fw-bold text-primary mb-1">#@order.OrderNumber</h6>
                                                    <p class="text-muted small mb-2">
                                                        <i class="fas fa-clock me-1"></i>@order.OrderDate.ToString("hh:mm tt")
                                                        <span class="mx-2">•</span>
                                                        <i class="fas fa-box me-1"></i>@order.OrderItems.Count item@(order.OrderItems.Count != 1 ? "s" : "")
                                                    </p>
                                                    <div class="order-items">
                                                        @foreach (var item in order.OrderItems.Take(3))
                                                        {
                                                            <span class="badge bg-light text-dark me-1 mb-1">
                                                                @item.ItemType.ToString() @(item.Quantity > 1 ? $"(x{item.Quantity})" : "")
                                                            </span>
                                                        }
                                                        @if (order.OrderItems.Count > 3)
                                                        {
                                                            <span class="badge bg-secondary">+@(order.OrderItems.Count - 3) more</span>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="col-md-4 text-md-end">
                                                    <div class="mb-2">
                                                        <span class="badge status-badge status-@order.OrderStatus.ToString().ToLower() fs-6">
                                                            @order.OrderStatus
                                                        </span>
                                                    </div>
                                                    <div class="mb-2">
                                                        <span class="fw-bold text-success fs-5">@order.FormattedTotalAmount</span>
                                                    </div>
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <a href="@Url.Action("OrderDetails", "Customer", new { id = order.OrderId })" 
                                                           class="btn btn-outline-primary">
                                                            <i class="fas fa-eye"></i>
                                                        </a>
                                                        @if (order.OrderStatus == ABCCarTraders.Models.ViewModels.OrderStatus.Delivered)
                                                        {
                                                            <button type="button" class="btn btn-outline-success" 
                                                                    onclick="reorderItems(@order.OrderId)" title="Reorder">
                                                                <i class="fas fa-redo"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
            
            <!-- Table View (Hidden by default) -->
            <div id="tableView" class="d-none">
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th class="px-3">Order #</th>
                                <th>Date & Time</th>
                                <th>Items</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Payment</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in Model.Orders)
                            {
                                <tr>
                                    <td class="px-3">
                                        <span class="fw-bold text-primary">#@order.OrderNumber</span>
                                    </td>
                                    <td>
                                        <div>@order.OrderDate.ToString("MMM dd, yyyy")</div>
                                        <small class="text-muted">@order.OrderDate.ToString("hh:mm tt")</small>
                                    </td>
                                    <td>
                                        <span class="badge bg-light text-dark">
                                            @order.OrderItems.Count item@(order.OrderItems.Count != 1 ? "s" : "")
                                        </span>
                                    </td>
                                    <td>
                                        <span class="fw-bold text-success">@order.FormattedTotalAmount</span>
                                    </td>
                                    <td>
                                        <span class="badge status-badge status-@order.OrderStatus.ToString().ToLower()">
                                            @order.OrderStatus
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge payment-badge payment-@order.PaymentStatus.ToString().ToLower()">
                                            @order.PaymentStatus
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group btn-group-sm">
                                            <a href="@Url.Action("OrderDetails", "Customer", new { id = order.OrderId })" 
                                               class="btn btn-outline-primary">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            @if (order.OrderStatus == ABCCarTraders.Models.ViewModels.OrderStatus.Delivered)
                                            {
                                                <button type="button" class="btn btn-outline-success" 
                                                        onclick="reorderItems(@order.OrderId)">
                                                    <i class="fas fa-redo"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-history fa-4x text-muted mb-4"></i>
                <h4 class="text-muted mb-3">No Order History Found</h4>
                <p class="text-muted mb-4">
                    @if (!string.IsNullOrEmpty(ViewData["SearchQuery"]?.ToString()))
                    {
                        <span>No orders match your search criteria. Try adjusting your filters.</span>
                    }
                    else
                    {
                        <span>You haven't placed any orders yet. Start shopping to build your order history!</span>
                    }
                </p>
                <div class="d-flex gap-3 justify-content-center">
                    @if (!string.IsNullOrEmpty(ViewData["SearchQuery"]?.ToString()))
                    {
                        <a href="@Url.Action("OrderHistory", "Customer")" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-2"></i>Clear Filters
                        </a>
                    }
                    <a href="@Url.Action("Index", "Cars")" class="btn btn-primary btn-lg">
                        <i class="fas fa-car me-2"></i>Start Shopping
                    </a>
                </div>
            </div>
        }
    </div>
</div>

<!-- Pagination -->
@if (Model.Pagination != null && Model.Pagination.TotalPages > 1)
{
    <nav aria-label="Order history pagination" class="mt-4">
        <ul class="pagination justify-content-center">
            @if (Model.Pagination.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="?page=@(Model.Pagination.CurrentPage - 1)">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            }
            
            @for (int i = Math.Max(1, Model.Pagination.CurrentPage - 2); 
                  i <= Math.Min(Model.Pagination.TotalPages, Model.Pagination.CurrentPage + 2); 
                  i++)
            {
                <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                    <a class="page-link" href="?page=@i">@i</a>
                </li>
            }
            
            @if (Model.Pagination.CurrentPage < Model.Pagination.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="?page=@(Model.Pagination.CurrentPage + 1)">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            }
        </ul>
    </nav>
}

<style>
    .page-header {
        background: linear-gradient(135deg, #0d6efd 0%, #0056b3 100%);
        border-radius: 15px;
    }
    
    .stat-card {
        border-radius: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background: linear-gradient(135deg, var(--bs-primary) 0%, var(--bs-primary-rgb) 100%);
    }
    
    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }
    
    .bg-gradient-primary {
        background: linear-gradient(135deg, #0d6efd 0%, #0056b3 100%) !important;
    }
    
    .bg-gradient-success {
        background: linear-gradient(135deg, #198754 0%, #146c43 100%) !important;
    }
    
    .bg-gradient-info {
        background: linear-gradient(135deg, #0dcaf0 0%, #0aa1c7 100%) !important;
    }
    
    .order-timeline {
        position: relative;
    }
    
    .timeline-item {
        position: relative;
        padding-left: 3rem;
    }
    
    .timeline-marker {
        position: absolute;
        left: 0;
        top: 1rem;
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        background: #fff;
        border: 3px solid #dee2e6;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 2;
    }
    
    .timeline-item:not(:last-child)::before {
        content: '';
        position: absolute;
        left: 0.875rem;
        top: 3rem;
        bottom: -1rem;
        width: 2px;
        background: #dee2e6;
        z-index: 1;
    }
    
    .timeline-content {
        flex: 1;
    }
    
    .status-badge {
        padding: 0.5em 0.75em;
        border-radius: 6px;
        font-weight: 500;
    }
    
    .status-pending { background-color: #ffc107; color: #000; }
    .status-confirmed { background-color: #17a2b8; color: #fff; }
    .status-processing { background-color: #6f42c1; color: #fff; }
    .status-shipped { background-color: #fd7e14; color: #fff; }
    .status-delivered { background-color: #28a745; color: #fff; }
    .status-cancelled { background-color: #dc3545; color: #fff; }
    
    .payment-badge {
        padding: 0.4em 0.65em;
        border-radius: 6px;
        font-weight: 500;
        font-size: 0.75em;
    }
    
    .payment-pending { background-color: #ffc107; color: #000; }
    .payment-paid { background-color: #28a745; color: #fff; }
    .payment-failed { background-color: #dc3545; color: #fff; }
    .payment-refunded { background-color: #6c757d; color: #fff; }
    
    .card {
        border-radius: 15px;
    }
    
    .btn {
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    
    .timeline-date {
        position: sticky;
        top: 1rem;
        z-index: 10;
    }
    
    @@media (max-width: 768px) {
        .timeline-item {
            padding-left: 2rem;
        }
        
        .timeline-marker {
            width: 1.5rem;
            height: 1.5rem;
            left: 0.25rem;
        }
        
        .timeline-item:not(:last-child)::before {
            left: 1rem;
        }
    }
</style>

<script>
    function toggleView(viewType) {
        const timelineView = document.getElementById('timelineView');
        const tableView = document.getElementById('tableView');
        
        if (viewType === 'timeline') {
            timelineView.classList.remove('d-none');
            tableView.classList.add('d-none');
        } else {
            timelineView.classList.add('d-none');
            tableView.classList.remove('d-none');
        }
    }
    
    function reorderItems(orderId) {
        if (confirm('Add all items from this order to your cart?')) {
            fetch('@Url.Action("Reorder", "Customer")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({ orderId: orderId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Items added to cart successfully!');
                    window.location.href = '@Url.Action("Cart", "Order")';
                } else {
                    alert('Error reordering: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while reordering.');
            });
        }
    }
    
    // Auto-submit form when filters change
    document.addEventListener('DOMContentLoaded', function() {
        const filterForm = document.querySelector('form');
        const selects = filterForm.querySelectorAll('select');
        const dateInputs = filterForm.querySelectorAll('input[type="date"]');
        
        [...selects, ...dateInputs].forEach(input => {
            input.addEventListener('change', function() {
                // Add a small delay to allow multiple rapid changes
                clearTimeout(input.submitTimeout);
                input.submitTimeout = setTimeout(() => {
                    filterForm.submit();
                }, 500);
            });
        });
    });
</script>