@{
    // Alert Messages Partial View
    // This partial handles all types of alert messages from TempData
}

<!-- Success Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>
        <strong>Success!</strong> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Error Messages -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-circle me-2"></i>
        <strong>Error!</strong> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Warning Messages -->
@if (TempData["WarningMessage"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <strong>Warning!</strong> @TempData["WarningMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Info Messages -->
@if (TempData["InfoMessage"] != null)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <i class="fas fa-info-circle me-2"></i>
        <strong>Info:</strong> @TempData["InfoMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Multiple Success Messages -->
@if (TempData["SuccessMessages"] != null)
{
    var successMessages = TempData["SuccessMessages"] as List<string>;
    if (successMessages?.Any() == true)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            <strong>Success!</strong>
            <ul class="mb-0 mt-2">
                @foreach (var message in successMessages)
                {
                    <li>@message</li>
                }
            </ul>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}

<!-- Multiple Error Messages -->
@if (TempData["ErrorMessages"] != null)
{
    var errorMessages = TempData["ErrorMessages"] as List<string>;
    if (errorMessages?.Any() == true)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            <strong>Errors occurred:</strong>
            <ul class="mb-0 mt-2">
                @foreach (var message in errorMessages)
                {
                    <li>@message</li>
                }
            </ul>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}

<!-- Validation Summary -->
@if (ViewData.ModelState?.IsValid == false)
{
    var validationErrors = ViewData.ModelState
        .SelectMany(x => x.Value.Errors)
        .Select(x => x.ErrorMessage)
        .Where(x => !string.IsNullOrEmpty(x))
        .ToList();
    
    if (validationErrors.Any())
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            <strong>Please correct the following errors:</strong>
            <ul class="mb-0 mt-2">
                @foreach (var error in validationErrors)
                {
                    <li>@error</li>
                }
            </ul>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}

<!-- Custom Alert with Icon and Action -->
@if (TempData["CustomAlert"] != null)
{
    var customAlert = TempData["CustomAlert"] as dynamic;
    if (customAlert != null)
    {
        <div class="alert alert-@(customAlert.Type ?? "primary") alert-dismissible fade show" role="alert">
            @if (!string.IsNullOrEmpty(customAlert.Icon))
            {
                <i class="@customAlert.Icon me-2"></i>
            }
            @if (!string.IsNullOrEmpty(customAlert.Title))
            {
                <strong>@customAlert.Title</strong>
            }
            @customAlert.Message
            
            @if (!string.IsNullOrEmpty(customAlert.ActionUrl) && !string.IsNullOrEmpty(customAlert.ActionText))
            {
                <hr>
                <div class="d-flex">
                    <a href="@customAlert.ActionUrl" class="btn btn-outline-@(customAlert.Type ?? "primary") btn-sm">
                        @customAlert.ActionText
                    </a>
                </div>
            }
            
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}

<!-- Session Messages (for AJAX responses) -->
<div id="sessionMessages" class="session-messages">
    <!-- Messages will be populated by JavaScript -->
</div>

<!-- Toastr Notifications Container -->
<div id="toastr-container" aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 11000;">
    <!-- Toast notifications will be added here -->
</div>

<style>
    .alert {
        border: none;
        border-radius: 0.5rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    }
    
    .alert-success {
        background: linear-gradient(45deg, #d4edda, #c3e6cb);
        border-left: 4px solid #28a745;
    }
    
    .alert-danger {
        background: linear-gradient(45deg, #f8d7da, #f1b0b7);
        border-left: 4px solid #dc3545;
    }
    
    .alert-warning {
        background: linear-gradient(45deg, #fff3cd, #ffeaa7);
        border-left: 4px solid #ffc107;
    }
    
    .alert-info {
        background: linear-gradient(45deg, #d1ecf1, #bee5eb);
        border-left: 4px solid #17a2b8;
    }
    
    .alert i {
        font-size: 1.1em;
    }
    
    .alert ul {
        padding-left: 1.2rem;
    }
    
    .alert hr {
        margin: 0.75rem 0;
        opacity: 0.5;
    }
    
    .session-messages {
        position: fixed;
        top: 80px;
        right: 20px;
        z-index: 10000;
        max-width: 400px;
    }
    
    .toast {
        border: none;
        border-radius: 0.5rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
    }
    
    .toast-header {
        background: transparent;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }
    
    @@media (max-width: 768px) {
        .session-messages {
            left: 20px;
            right: 20px;
            max-width: calc(100% - 40px);
        }
        
        .alert {
            font-size: 0.9rem;
        }
    }
    
    /* Animation for alerts */
    .alert {
        animation: slideInDown 0.4s ease-out;
    }
    
    @@keyframes slideInDown {
        from {
            transform: translateY(-100%);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }
    
    /* Fade out animation when dismissed */
    .alert.fade:not(.show) {
        animation: slideOutUp 0.4s ease-in;
    }
    
    @@keyframes slideOutUp {
        from {
            transform: translateY(0);
            opacity: 1;
        }
        to {
            transform: translateY(-100%);
            opacity: 0;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Auto-dismiss alerts after 10 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert:not(.alert-important)');
            alerts.forEach(function(alert) {
                const bsAlert = bootstrap.Alert.getOrCreateInstance(alert);
                if (bsAlert) {
                    bsAlert.close();
                }
            });
        }, 10000);
        
        // Function to show toast notification
        window.showToast = function(type, title, message, duration = 5000) {
            const toastContainer = document.getElementById('toastr-container');
            const toastId = 'toast-' + Date.now();
            
            const toastHtml = `
                <div id="${toastId}" class="toast align-items-center text-white bg-${type}" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            <strong>${title}</strong><br>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            
            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, {
                delay: duration
            });
            
            toast.show();
            
            // Remove from DOM after it's hidden
            toastElement.addEventListener('hidden.bs.toast', function() {
                toastElement.remove();
            });
        };
        
        // Function to show session message (for AJAX calls)
        window.showSessionMessage = function(type, message, title = '') {
            const container = document.getElementById('sessionMessages');
            const messageId = 'session-msg-' + Date.now();
            
            const alertClass = type === 'error' ? 'danger' : type;
            const icon = {
                'success': 'fas fa-check-circle',
                'error': 'fas fa-exclamation-circle',
                'warning': 'fas fa-exclamation-triangle',
                'info': 'fas fa-info-circle'
            }[type] || 'fas fa-info-circle';
            
            const alertHtml = `
                <div id="${messageId}" class="alert alert-${alertClass} alert-dismissible fade show" role="alert">
                    <i class="${icon} me-2"></i>
                    ${title ? '<strong>' + title + '</strong> ' : ''}${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto-dismiss after 8 seconds
            setTimeout(function() {
                const alertElement = document.getElementById(messageId);
                if (alertElement) {
                    const bsAlert = bootstrap.Alert.getOrCreateInstance(alertElement);
                    bsAlert.close();
                }
            }, 8000);
        };
        
        // Global AJAX error handler
        $(document).ajaxError(function(event, xhr, settings, thrownError) {
            if (xhr.responseJSON && xhr.responseJSON.message) {
                showSessionMessage('error', xhr.responseJSON.message, 'Request Failed');
            } else {
                showSessionMessage('error', 'An unexpected error occurred. Please try again.', 'Error');
            }
        });
    });
</script>